'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @name: js 折叠器collapse
 * @description: ##主要功能
 *1、支持点击收起-张开
 *2、支持点击张开所有
 *3、支持当前只能张开一栏
 *4、支持当前可以张开多栏
 * @author: 家永(809206619@qq.com | liejystephen@gmail.com)
 * @update: 2018-01-21 01:21
 */
var CollapseFor = function () {
    function CollapseFor(container, options) {
        _classCallCheck(this, CollapseFor);

        this.name = 'CollapseFor';
        this.currentIndex = 0;
        this.eventType = '';
        this.options = options;
        this.container = container;
        this.collapse = {
            trigger: {},
            collapse: {}
        };
        this._init();
    }

    _createClass(CollapseFor, [{
        key: 'singleCollapse',
        value: function singleCollapse() {
            var _collapse = this.collapse,
                trigger = _collapse.trigger,
                collapse = _collapse.collapse;

            var index = this.currentIndex;

            for (var i = 0; i < trigger.length; i++) {
                if (trigger[i] === trigger[index] || trigger[i] === trigger[index]) {
                    this.toggleClass(trigger[i]);
                    this.toggle(collapse[i]);
                } else {
                    this.removeClass(trigger[i], this.options['activeCls']);
                    this.hide(collapse[i]);
                }
            }
        }
    }, {
        key: 'allCollapse',
        value: function allCollapse() {
            var _collapse2 = this.collapse,
                collapse = _collapse2.collapse,
                trigger = _collapse2.trigger;

            var index = this.currentIndex;
            this.toggleClass(trigger[index]);
            this.toggle(collapse[index]);
        }
    }, {
        key: 'collapseMode',
        value: function collapseMode() {
            if (this.options['mode'].single) {
                this.singleCollapse();
                return;
            }

            if (this.options['mode'].all) {
                this.allCollapse();
                return;
            }
            this.allCollapse();
        }
    }, {
        key: 'event',
        value: function event(e) {
            e = e || window.event;
            var target = e.target || window.srcElement;
            switch (e.type) {
                case 'touchstart':
                    this.eventType = e.type;
                    this._getCurrentIndex(target);
                    this.collapseMode();
                    break;
                case 'click':
                    if (this.eventType === 'touchstart') {
                        return;
                    }
                    this._getCurrentIndex(target);
                    this.collapseMode();
                    break;
            }
        }
    }, {
        key: 'listener',
        value: function listener() {
            var _this = this;

            this.container.addEventListener('touchstart', function (e) {
                _this.event(e);
            }, false);
            this.container.addEventListener('click', function (e) {
                _this.event(e);
            }, false);
        }
    }, {
        key: 'show',
        value: function show(el) {
            el.style.cssText = this.options['triggerStyle'];
        }
    }, {
        key: 'hide',
        value: function hide(el) {
            el.style.cssText = this.options['defaultStyle'];
        }
    }, {
        key: 'toggle',
        value: function toggle(el) {
            if (el.style.display === 'block') {
                this.hide(el);
            } else {
                this.show(el);
            }
        }
    }, {
        key: 'toggleClass',
        value: function toggleClass(el) {
            var activeCls = this.options['activeCls'];
            if (this.hasClass(el, activeCls)) {
                this.removeClass(el, activeCls);
            } else {
                this.addClass(el, activeCls);
            }
        }
    }, {
        key: 'hasClass',
        value: function hasClass(el, cls) {
            var reg = new RegExp('(^|\\s)' + cls + '(\\s|$)');
            return reg.test(el.className);
        }
    }, {
        key: 'addClass',
        value: function addClass(el, cls) {
            if (this.hasClass(el, cls)) {
                return;
            }
            var newCls = el.className.split(' ');
            newCls.push(cls);
            el.className = newCls.join(' ');
        }
    }, {
        key: 'removeClass',
        value: function removeClass(el, cls) {
            if (!this.hasClass(el, cls)) {
                return;
            }
            var reg = new RegExp('(^|\\s)' + cls + '(\\s|$)');
            el.className = el.className.replace(reg, '');
        }
    }, {
        key: '_getCurrentIndex',
        value: function _getCurrentIndex(target) {
            for (var i = 0; i < this.collapse.trigger.length; i++) {
                if (this.collapse.trigger[i] === target || this.collapse.trigger[i] === target.parentNode) {
                    this.currentIndex = i;
                }
            }
        }
    }, {
        key: '_initData',
        value: function _initData() {
            var trigger = this.container.querySelectorAll(this.options['triggerCls']),
                collapse = this.container.querySelectorAll(this.options['collapseCls']);
            this.collapse = { trigger: trigger, collapse: collapse };
        }
    }, {
        key: '_extend',
        value: function _extend() {
            var def = CollapseFor.DEFAULT_OPTIONS;
            for (var key in def) {
                if (this.options[key]) {
                    continue;
                }
                this.options[key] = def[key];
            }
        }
    }, {
        key: '_init',
        value: function _init() {
            this._extend();
            this._initData();
            this.listener();
        }
    }]);

    return CollapseFor;
}();

CollapseFor.DEFAULT_OPTIONS = {
    collapseCls: '.collapse-item-content',
    triggerCls: '.collapse-item-title[data-trigger="collapse"]',
    activeCls: 'active',
    defaultStyle: ';transform-origin: top;transition:height .5s;height: 0;',
    triggerStyle: ';transform-origin: top;transition:height .5s;height:auto;',
    mode: {
        single: false,
        all: false
    }
};